/*****************************************************************************
* definition of constants
*
*****************************************************************************/
#ifndef IVGCONST_H
#define IVGCONST_H

#include <vector>
#include <string>
#include "cmath"
//#include "qcustomplot.h"

using namespace std;

namespace ivg
{
  // Vesion number:
  const string ASCOT_version = "ver-2021-01-01"; 
  
// CONVERSIONS
    
//Band-Type
enum band { X, S , MAXBANDTYPE};

// arcseconds to radian and vice versa
const double as2rad  = 2*M_PI/(360.0*3600.0);
const double mas2rad = 2*M_PI/(360.0*3600.0*1000.0);
const double rad2mas = 1.0/mas2rad;
const double rad2as  = 1.0/as2rad;

// seconds of time to rad and vice versa
const double s2rad   = 2*M_PI/86400.0;
const double rad2s   = 1.0/s2rad;

// hours of time to rad and vice versa
const double h2rad   = 2*M_PI/24;
const double rad2h   = 1.0/h2rad;

// degree to radian and vice versa
const double d2rad   = 2*M_PI/360;
const double rad2d   = 1.0/d2rad;

// fake MJD to indicate that date should not be used
const double fake_mjd = -10000.0;


// ATMOSPHERE

// temperature lapse rate [K/m]
const double gamma = -0.0065 ;

// specific gas constant [m^2 1/K 1/s^2]
const double R = 287.058 ;

// saturlation length scale
const double L = 3e6;

// outer scale length
const double L0 = 6000.0;


// OTHER

// velocity of light
const double c = 299792458.0;

// gravity [m/s^2]
const double g = 9.81 ;

// VLBI X band frequency
const double freq_x = 8.4e9;

// leap seconds matrix (e.g. for classes date, eop_series, parser)
const std::vector<double> leap_secs( { 0., 41317., 41499., 41683., 42048., 42413., 42778.,
          43144., 43509., 43874., 44239., 44786., 45151.,
          45516., 46247., 47161., 47892., 48257., 48804.,
          49169., 49534., 50083., 50630., 51179., 53736.,
          54832., 56109., 57204, 57754, 99999,
          10.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0,
          18.0, 19.0, 20.0, 21.0, 22.0, 23.0, 24.0, 25.0,
          26.0, 27.0, 28.0, 29.0, 30.0, 31.0, 32.0, 33.0,
          34.0, 35.0, 36.0, 37.0, 37.0
} );

// official ICRF2 special handling sources (ivg::srcname::iers)
const std::vector<string> special_handlings( {"0014+813","0106+013","0202+149","0208-512","0212+735","0235+164","0438-436",
"0451-282","0528+134","0607-157","0637-752","0711+356","0738+313","0919-260","1021-006",
"1044+719","1308+326","1448+762","1610-771","1611+343","1739+522","2121+053",
"2128-123","2134+004","2145+067","2201+315","2234+282","2243-123","0430+052",
"1226+023","1253-055","1458+718","1641+399","2251+158","0316+413","0923+392",
"0238-084","0953+254","1404+286"
} );

// official ICRF2 defining sources (ivg::srcname::iers)
const std::vector<string> icrf2_definings( {"0002-478","0007+106","0008-264","0010+405","0013-005","0016+731","0019+058","0035+413","0048-097","0048-427","0059+581","0104-408",
"0107-610","0109+224","0110+495","0116-219","0119+115","0131-522","0133+476","0134+311","0138-097","0151+474","0159+723","0202+319","0215+015","0221+067","0230-790","0229+131",
"0234-301","0235-618","0234+285","0237-027","0300+470","0302-623","0302+625","0306+102","0308-611","0307+380","0309+411","0322+222","0332-403","0334-546","0342+147","0346-279",
"0358+210","0402-362","0403-132","0405-385","0414-189","0420-014","0422+004","0426+273","0430+289","0437-454","0440+345","0446+112","0454-810","0454-234","0458-020","0458+138",
"0506-612","0454+844","0506+101","0507+179","0516-621","0515+208","0522-611","0524-460","0524-485","0524+034","0529+483","0534-611","0534-340","0537-441","0536+145","0537-286",
"0544+273","0549-575","0552+398","0556+238","0600+177","0642+449","0646-306","0648-165","0656+082","0657+172","0707+476","0716+714","0722+145","0718+792","0727-115","0736+017",
"0738+491","0743-006","0743+259","0745+241","0748+126","0759+183","0800+618","0805+046","0804+499","0805+410","0808+019","0812+367","0814+425","0823+033","0827+243","0834-201",
"0851+202","0854-108","0912+029","0920-397","0920+390","0925-203","0949+354","0955+476","0955+326","0954+658","1004-500","1012+232","1013+054","1014+615","1015+359","1022-665",
"1022+194","1030+415","1030+074","1034-374","1034-293","1038+528","1039+811","1042+071","1045-188","1049+215","1053+815","1055+018","1101-536","1101+384","1111+149","1123+264",
"1124-186","1128+385","1130+009","1133-032","1143-696","1144+402","1144-379","1145-071","1147+245","1149-084","1156-663","1156+295","1213-172","1215+303","1219+044","1221+809",
"1226+373","1236+077","1240+381","1243-072","1244-255","1252+119","1251-713","1300+580","1308+328","1313-333","1324+224","1325-558","1334-127","1342+662","1342+663","1349-439",
"1351-018","1354-152","1357+769","1406-076","1418+546","1417+385","1420-679","1423+146","1424-418","1432+200","1443-162","1448-648","1451-400","1456+044","1459+480","1502+106",
"1502+036","1504+377","1508+572","1510-089","1511-100","1514+197","1520+437","1519-273","1546+027","1548+056","1555+001","1554-643","1557+032","1604-333","1606+106","1611-710",
"1614+051","1617+229","1619-680","1622-253","1624-617","1637+574","1638+398","1639+230","1642+690","1633-810","1657-261","1657-562","1659-621","1705+018","1706-174","1717+178",
"1726+455","1730-130","1725-795","1732+389","1738+499","1738+476","1741-038","1743+173","1745+624","1749+096","1751+288","1754+155","1758+388","1803+784","1800+440","1758-651",
"1806-458","1815-553","1823+689","1823+568","1824-582","1831-711","1842+681","1846+322","1849+670","1908-201","1920-211","1921-293","1925-610","1929+226","1933-400","1936-155",
"1935-692","1954+513","1954-388","1958-179","2000+472","2002-375","2008-159","2029+121","2052-474","2059+034","2106+143","2106-413","2113+293","2123-463","2126-158","2131-021",
"2136+141","2142-758","2150+173","2204-540","2209+236","2220-351","2223-052","2227-088","2229+695","2232-488","2236-572","2244-372","2245-328","2250+190","2254+074","2255-282",
"2300-683","2318+049","2326-477","2333-415","2344-514","2351-154","2353-686","2355-534","2355-106","2356+385","2357-318"
} );

const std::vector<string> color_values = {
        "#000000", "#0000FF", "#00FF00", "#ab5e1a", "#8a38be", "#FF34FF", "#ffa200", "#FF0000",
       // "#000000", "#FF4A46", "#006FA6", "#ab5e1a", "#8a38be", "#008941", "#FF34FF", "#ffa200",
        "#A30059", "#FFDBE5", "#0000A6", "#997D87", "#B79762", "#004D43", "#8FB0FF", "#63FFAC",
        "#5A0007", "#809693", "#FEFFE6", "#1B4400", "#4FC601", "#3B5DFF", "#4A3B53", "#FF2F80",
        "#61615A", "#BA0900", "#6B7900", "#00C2A0", "#FFAA92", "#FF90C9", "#B903AA", "#D16100",
        "#DDEFFF", "#000035", "#7B4F4B", "#A1C299", "#300018", "#0AA6D8", "#013349", "#00846F",
        "#372101", "#FFB500", "#C2FFED", "#A079BF", "#CC0744", "#C0B9B2", "#C2FF99", "#001E09",
        "#00489C", "#6F0062", "#0CBD66", "#EEC3FF", "#456D75", "#B77B68", "#7A87A1", "#788D66",
        "#885578", "#FAD09F", "#FF8A9A", "#D157A0", "#BEC459", "#456648", "#0086ED", "#886F4C",      
};

// access ivg::color_values and converts the given index in a valid range.
// Direct access might lead to the error 'vector::_M_range_check'
static std::string get_color_value( unsigned int i) {
    unsigned int n =  ivg::color_values.size();
    return ivg::color_values[ i % n];
}

static std::string band_to_string(ivg::band type )
{
        switch(type)
        {
            case ivg::band::X:
                return "X";
            case ivg::band::S:
                return "S";
        }
}

}
#endif // IVGCONST
