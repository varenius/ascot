# ************************************************************************   
# configuration file: only clocks are estimated
# for ambiguity resulution. Do not change if you don't know what you do
#
# ************************************************************************   
version = "1.0";

setup:
{
   @include "/home/corbin/ascot/config/definitions.cfg"
   outdir = "/home/corbin/ascot/output/";
   logdir = "/home/corbin/ascot/output/";
   export_snx = { save = true,
                  dir  = "", # empty string => outdir is used
                  version = "",
                  type = "COVA" };            # (NEQ|SOLUTION)
   export_gmm = true;
   obs_met_info = ( false, "/home/bakkari/test/" );

   export_resid = { save = false, dir="", format="ASCOT" };
   export_snx_tro = { save = false, dir="", version="" };

   datadirs = ( ("test", "vgosdb", "/home/corbin/vgosDB_V1/") );

   session_type = "test"; 

   # max observation in session in order to get processed
   max_obs = 20000;

   use_wrapper = true; # only in case of vgosDB

   #ambiguity resolution
   solve_ambig = true;
   
# ************************************************************************   
#                              AMBIGUITY RESOLUTION
# ************************************************************************
# needed for auto_intensive.cpp

   # 0: manual
   # 1: mn (resid with most neigbours)
   # 2: ahc (agglomerative hierarchical clustering)

   resolve_type = 1;

   #path to masterfiles
   masterfiles = "/home/ascot/apriori_files/masterfiles/";

   #remote locations for log files and vgosDB
   remotedir = { log = "ftp://ivs.bkg.bund.de/pub/vlbi/ivsdata/aux/";
                 vgos = "ftp://gemini.gsfc.nasa.gov/pub/vgosDB_IVS/";
               };

   ltndir = { log = "/home/corbin/logs/"; #path containing local log files
             data = "/home/corbin/ivg_ascot/src/ivg/ltn/Data/"; #path to files needed by ltn (log to nc)
            };

   period = {start = 2002;
               end = 2015; 
            };

   new_editing = "igg3";
   
# ************************************************************************   
#                                    GENERAL SETTINGS
# ************************************************************************

# Session names
# session names are ignored
sessions = (
    @include "/home/corbin/ascot/triangle_check/cont2/cont2.arc"
    );

         refframes =
	(("itrf2008","SSC","/home/ascot/apriori_files/ITRF2008_VLBI.SSC.txt"),
                     
	("vtrf2014","SSC","/home/ascot/apriori_files/IVS_TRF2014b.SSC.txt"),
                     
	("itrf2014","SNX","/home/ascot/apriori_files/ITRF2014P-IVS-TRF.SNX"),
                     
	("icrf2","ICRF2","/home/ascot/apriori_files/icrf2-vcs-only.dat","/home/ascot/apriori_files/icrf2-non-vcs.dat"),
                     
	("ocars","OCARS","/home/ascot/apriori_files/ocars.txt"));     
 
         #Reference Frames
         crf = "icrf2";             # icrf2 / ocars / ngs
         trf = "vtrf2014";          # itrf2008 / vtrf2014
                  
         #Ephemerides
         ephemerides = "jpl421"; # jpl405 / jpl421

         #Earth Orientation
         eop_files = (("dedecc1","C04", "/home/ascot/apriori_files/DeDeCC1/const.erp"),
		                ("vievs_tmp","C04", "/home/ascot/apriori_files/vievs_C04_08_1962_now.txt"),
		                ("iersc04","C04", "/home/ascot/apriori_files/eopc04_IAU2000.62-now"),
		                ("c04opa","C04", "/home/ascot/apriori_files/eopc04_IAU2000.txt"),
                      ("finals2000A","finals", "/home/ascot/apriori_files/finals2000A.all")); 

         eop = { erp_aprioris = "iersc04";
                 ut1_zonal_tides = false;
                 hf_ocean = true;
                 ut_libration = true;
                 pm_nutation = true;
                 nutation_type = "MODFILE"; 
                 interpolation_type = "cspline"; #cspline|linear|polynomial
                };
                     
         #Troposhphere
         troposphere = { external_meteo_data = ( false, "meteo", "ecmwf" );  # true|false, meteo|zhd, insitu|ecmwf|gpt2
			 gpt2_grid_file = "/home/ascot/apriori_files/gpt2_5.grd";
                         mapping_function = "vmf1";          # vmf1|gpt2|gmf
                         interpolation_type = "cspline";     # linear|cspline
			 bending_mode = "approx"; 	     # nonne|insitu|height|approx
			}; 
			
         
	 # Ionosphere (To-Do: TEC maps, ionosphere models,... )
        ionosphere = { apply = true,
        exclude_bls = (  ); };

         # thermal expansion according to Nothnagel (2009)
         thermal_expansion = false;
         
         #Station Geophysical Effects
         stadisp = ( ("SOLID EARTH TIDES", true),
                     ("OCEAN LOADING", true, "fes2004"),
                     ("POLE TIDE", true, 2015 ),
                     ("OCEAN POLE TIDE LOADING", true),
                     ("TIDAL APLO", true),
                     ("NON TIDAL APLO", true, "cspline"),
                     ("HYDROLOGY LOADING", false, "cspline","cmte"),
                     ("PSD", false, "/home/bakkari/itrf2014P/ITRF2014P-psd-vlbi.dat")  ); #cmte / cmse

                      
# ************************************************************************   
#                                     GROUPS
# ************************************************************************                                          
         # define groups of stations for parametrization
         groups = { 
			           stations = ( );
	      	        sources = ( ["0133+476", "0234+285", "1357+769", "1611+343", "1823+568"] 
 				                  );
			           baselines = ( );
		   };
                      
         icrf2_def_src = ( );             
                      
# ************************************************************************   
#                                     PARAMETER
# ************************************************************************  
#
# There is really no reason to change anything in this block !!!
#                    

PARAMS = {

         # clocks: stations, for which clocks should be estimated,
         #         handling, i.e., parameter should be reduced/fixed or not,
         #         polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #         continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         clocks = ( 
                    { stations = "vgosdb";
                      handling = "fix" ; # reduce / fix / none
                      polynom = { order = 0;
                                   cnstr = ( 0.0 ); };
                      cpwlf = { insert = false;
                                  int_length = 60.0;
                                  rate_cnstr = 2e-14; }; },                       
                    { stations = 0;
                      handling = "none" ; # reduce / fix / none
                      polynom = { order = 2;
                                   cnstr = ( 0.0, 0.0, 0.0 ); };
                      cpwlf = { insert = true;
                                int_length = 60.0;
                                rate_cnstr = 7.2e-10; }; } );   # 2e-14 = 7.2e-10 ds/h 


        bl_clocks = ( { baselines = 0;
        handling = "fix" ;
        polynom = { order = 0;
        cnstr = ( 0.0 ); }; } );
             
            
         # zenith wet delays: stations, for which clocks should be estimated,
         #                    handling, i.e., parameter should be reduced/fixed or not,
         #                    polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #                    continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         zwd = ( { stations = 0;
                  handling = "fix" ; # reduce / fix / none
                  polynom = { order = 0;
                              cnstr = ( 0.0 ); };
                  cpwlf = { insert = true;
                             int_length = 20.0;
                             rate_cnstr = 1.333e-10; }; } );     # 40 ps/h = 4e-10 ds/h = 1.333e-10 ds/20 min
         
         # azimuthal gradients: stations, for which clocks should be estimated,
         #                      handling, i.e., parameter should be reduced/fixed or not,
         #                      polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #                      continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         gradients = ( { stations = 0;
                         handling = "fix" ; # reduce / fix / none
                         polynom = { order = 0;
                                     cnstr = ( 1.668e-10 ); };    # 0.5 mm = 1.668e-10 cs
                         cpwlf = { insert = true;
                                   int_length = 480.0;
                                   rate_cnstr = 2.2e-10; }; } );   # 2 mm/d = 6.671e-10 cs/d = 2.2e-10 cs/(8h)
         
         # Earth Rotation param.: stations, for which clocks should be estimated,
         #                        handling, i.e., parameter should be reduced/fixed or not,
         #                        polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #                        continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         pm =  ( { stations = 0;
                   handling = "fix" ; # reduce / fix / none
                   polynom = { order = 0;
                               cnstr = ( 0.0 ); };
                   cpwlf = { insert = false;
                              int_length = 0.0;
                              rate_cnstr = 0.0; }; } );
         ut1 =  ( { stations = 0;
                    handling = "fix" ; # reduce / fix / none
                    polynom = { order = 0;
                                cnstr = ( 0.0 ); };
                    cpwlf = { insert = false;
                              int_length = 0.0;
                              rate_cnstr = 0.0; }; } );
         nut =  ( { stations = 0;
                    handling = "fix" ; # reduce / fix / none
                    polynom = { order = 0;
                                cnstr = ( 0.0 ); };
                    cpwlf = { insert = false;
                               int_length = 0.0;
                               rate_cnstr = 0.0; }; } );
      
         # stations: stations, for which clocks should be estimated,
         #           handling, i.e., parameter should be reduced/fixed or not,
         #           polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #           continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         stations = ( 
                      { stations = 0;
                        handling = "fix" ; # reduce / fix / none
                        polynom = { order = 0;
                                    cnstr = ( 0.0 ); };
                        cpwlf = { insert = false;
                                  int_length = 0.0;
                                  rate_cnstr = 0.0; }; } );
                  
         
         # sources:  stations, for which clocks should be estimated,
         #           handling, i.e., parameter should be reduced/fixed or not,
         #           polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
         #           continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
         sources = ( { sources = 0;
                       handling = "fix"
                       polynom = { order = 0;
                                   cnstr = ( 0.0 ); };
                       cpwlf = { insert = false;
                                 int_length = 0.0;
                                 rate_cnstr = 0.0; }; } );
};         

# ************************************************************************   
#                           STOCHASTIC MODEL
# ************************************************************************                      

STOCHASTIC_MODEL = {
         # addional noise (according to Gipson (2007)):
         additional_noise = ( { stations = 0;
                               apply = true;
                               constant_sigma = 33.0;
                               elevation_dependent_sigma = 0.0;
                               correlated = false; } );
         
         # turbulence: stations: stations, for which VCM due to atmospheric turbulence should be applied,
         #             model:    atmospheric turbulence model
         #                        * sigma-c: SIGMA-C model (Schoen and Brunner, 2008)
         #                        * matern:  MATERN VCM model (Kermarrec and Schoen, 2014)
         #                        * onsala:  Treuhaft/Lanyi model and extensions (Treuhaft/Lanyi, 1987; Nilsson/Haas, 2010)
         turbulence = { apply = false;
                        model = "matern_model"; # sigma_c_model / matern_model / onsala_model
                        turb_params = ( { stations = -2;                                   
                                          Cn = 1.0e-7;
                                          H = 2000.0;
                                          v = 8.0;
                                          v_dir = 200.0; },
                                        { stations = 2;                                   
                                          Cn = 2.0e-7;
                                          H = 2000.0;
                                          v = 7.0;
                                          v_dir = 200.0; } );
                        spec_coeffs = ( 1.0, 1.0, 1.0 );
                        L = 3.0e6;
                        L0 = 6000.0;
                        
                      };
             
};     
        
# ************************************************************************   
#                                   DATA ELIM. BLOCK
# ************************************************************************         
         
        #elim_sta = ( "WARK12M", "HOBART12" );
        elim_sta = ();
        #minimum observations not to be eliminated
        elim_min_sta = -1;
        #elim_src = ( "1741-038", "4C39.25" );
        elim_src = ();
        keep_baseline = ();

        elim_baseline = ();

        # select method for outlier detection: 
        # BAARDA test if variance factor is known, POPE test otherwise  
        # or simple method using fixed number of iterations, a threshold 
        # for gross outliers and a quantile (inverse cdf)
        test_method = ( ( "baarda", { significance_level = 1e-9; } ), 
                        ( "pope",   { significance_level = 1e-9; } ), 
                        ( "simple", { iterations = 2;
                                      threshold = 1.0e-9;
                                      quantile = 3.0 } ) );
         vgosdb_editing = "iIVS";

         modify_cable_cal = ( ( "ONSALA60", 0.0 ) );

         outliers = { detect = false;
                      data_snooping = "baarda";
                      save = (false, "Edit_IVG");               # if true, quality_code = 0 
                                                  # AND use_obs_flags = false
                                                  # have to be set!
                      load = (false, "Edit_IVG_QC4");
                      force_load = false; # force to load EXACTLY e.g. Edit_IVG 
                    };

         quality_code = 1;        # only in case of vgosDB
         use_obs_flags = true;    # if true: only observations with delay flag "0"
                                  #          (and " " in case of NGS) are used from 
                                  #          the DELUFLAG entries in Edit.nc or the 
                                  #          flags in NGS card #2
                                  # if false: all obs are used

# ************************************************************************   
#                                     NNR/NNT
# ************************************************************************                             
         
         # No-Net-Rotation (NNR) and No-Net-Translation (NNT)
         no_net_cnstr = { stations = { stations = 0,
                                       apply = false,
                                       handling = "wird nicht benutzt",
                                       sigma = 3.3e-11, };
                          velocities = { stations = 0
                                         apply = false,
                                         handling = "wird nicht benutzt",
                                         sigma = 1e-2, };
                          sources = { sources = 0
                                      apply = false,
                                      handling = "wird nicht benutzt",
                                      sigma = 1e-2, }; };

        equal_clocks = { apply = false;
        stations = ( ["WETTZELL", "WETTZ13N"] ) ;
        orders = [ 1,2 ];
        sigma = 1.0e-14;
        };
         
# ************************************************************************   
#                                     SOLVE
# ************************************************************************                                            
                      
         # method to solve normal equation system
         solver = "LSM";  # ICLS|LSM
	 MC = 1000; 	  # number of Monte-Carlo iterations for ICLS quality numbers
	 pre-conditioning = true;
         remove_undefined_params = false;




} # setup
