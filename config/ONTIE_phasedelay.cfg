# ************************************************************************   
# independent Analysis Template
# analyze OSO ONTIE-experiments
# ************************************************************************   
version = "1.0";

setup:
{
    # path to the definitions file
    @include "/opt/ascot/config/definitions.cfg"

    # file containing ngs clock break information. you should not use ngs card (development was dropped). Instead use vgosDB
    brdir = "EGAL";

    # Output options -------------------------------------------------------------------------------

    # in this directory the output of ascot is saved ( e.g. skd files and GMM related binary files) 
    outdir = "/mnt/raidz0/ASCOT_out/PH/output/";
    # Here the log file is saved
    logdir = "/mnt/raidz0/ASCOT_out/PH/log/";

    # export sinex files (after analysis of data with e.g. LSA) 
    export_snx = { 
                    save    = true,
                    dir     = "/mnt/raidz0/ASCOT_out/PH/sinex/",
                    version = "oso2020x", # string is appended to file name
                    type    = "NEQ",      # COVA | NEQ
                    @include "/opt/ascot/config/sinex_oso.cfg"
                };

    # export observation residuals
    export_resid = { save = true, dir="/mnt/raidz0/ASCOT_out/PH/residuals/", format="ASCOT" };

    # export sinex file with troposphere information
    #export_snx_tro = { save = false, dir="", version="" };
    export_snx_tro = { save = true, dir="/mnt/raidz0/ASCOT_out/PH/sinex", version="" };

    # export Gauss Markov Model (Jacobianmatrix, Weightmatrix, Parametervector, o-c, aprioris,...)
    # to the path specified in setup[outdir]
    export_gmm = false;

    # export metrological information of observations
    # obs_met_info = ( false, "/data1/ASCOT/meteo/" );
#   obs_met_info = ( true, "/data1/ASCOT/meteo/" );
    obs_met_info = { save = true, dir="/mnt/raidz0/ASCOT_out/PH/meteo/", version="" };

    # ************************************************************************   
    #                                    GENERAL SETTINGS
    # ************************************************************************

    # vgosDB related settings
    use_wrapper = true; # uses the latest wrapper found in vgosDB with the editing defined in setup[vgosdb_editing]
    band = "X"; # X|S choose database (X is default)

    # specifiy database directories here
    # ( "someName", type, "path/to/databases/") 
    # possible types:  vgosdb | snx | skd | ngs | utas | sou
    datadirs = ( 
                #("sinex","snx", "/data1/ASCOT/sinex/","TRF2APR|APR2CRF|APR2EOP"),
                ("vgos" , "vgosdb", "/mnt/raidz0/K-analysis_Onames/vgosdbs/")
            );

    # choose database directory here (use first entry in setup[datadirs] as identifier)
    session_type = "vgos";


    # Define session that should be processed
    # Either specify sessions in this file like this:
    #  sessions = (
    #              { dbname = "18JAN02XU", version = "-1" },
    #              { dbname = "18FEB02XU", version = "-1" },
    #              { dbname = "18MAR01XU", version = "-1" }
    #             );
    # or include an arcfile with the session in the format used above
    # sessions = (
    #              @include "/home/corbin/EVGA19/arcfile_int1_2sta.arc"
    #            );
    # or combine both
    # After the lase entry there is NO comma!
    # in case of scheduling the dbname is used to define the date of the session to be scheduled
    sessions = (
                @include "/opt/ascot/config/ONTIE_all.arc"
                #@include "/opt/ascot/config/ONTIE_good.arc"
    #{ dbname = "19NOV23VB", version =  "-1", handling = { ref_clock = "BR-VLBA";}}
    #{ dbname = "19NOV23VB", version =  "-1"}
    #{ dbname = "19NOV23VB", version =  "-1", handling = { ref_clock = "ONSALA60";}}
    );

output_folder = "/mnt/raidz0/ASCOT_out/PH/output/";

# Apriori Information ---------------------------------------------------------------------------------
# specify Reference Frames here (TRF and CRF)
# ( "someName", type, "path/to/ref/frame/", (path/to/additional/file))
# possible types: TRF: SSC | SNX
#                 CRF: ICRF2 | OCARS ( ngs | snx | vgosdb )
    refframes = (
#                  ("itrf2008"   , "SSC"   , "/data1/ASCOT/apriori_files/ITRF2008_VLBI.SSC.txt"),
#                  ("vtrf2014"   , "SSC"   , "/data1/ASCOT/apriori_files/IVS_TRF2014b.SSC.txt"),
##                 ("vtrf2014ext", "SSC"   , "/data1/ASCOT/apriori_files/IVS_TRF2014b_ivg_ext.SSC.txt"),
#                  ("vtrf2014ext", "SSC"   , "/data1/ASCOT/apriori_files/IVS_TRF2019d.SSC.txt"),
#                  ("itrf2014"   , "SNX"   , "/data1/ASCOT/apriori_files/ITRF2014-IVS-TRF.SNX"),
                   ("vtrf2019ext", "SSC"   , "/opt/ascot/apriori_files/IVS_TRF2019d_withOTT.SSC.txt"),
#                  ("tn_gs"      , "SSC"   , "/data1/ASCOT/apriori_files/TN_GS.SSC.txt"),
#                  ("icrf2"      , "ICRF2" , "/data1/ASCOT/apriori_files/icrf2-vcs-only.dat","/data1/ASCOT/apriori_files/icrf2-non-vcs.dat"),
#                  ("ocars"      , "OCARS" , "/data1/ASCOT/apriori_files/ocars.txt"),
                  ("ivssrc"     , "IVSSRC", "/opt/ascot/apriori_files/IVS_SrcNamesTable.txt"),
                  ("icrf3"      , "ICRF3" , "/opt/ascot/apriori_files/icrf3sx.txt")
                );

  
    # choose Reference Frames here use (use first entry in setup[refframes] as identifier)
    crf = "icrf3";                # e.g. icrf2 / ocars / ngs / vgosdb
    trf = "vtrf2019ext";          # e.g. itrf2008 / vtrf2014
                  
    # Ephemerides of celestial bodies
    ephemerides = "jpl421"; # jpl405 | jpl421

    # specify Earth Orientation Parameters here
    # ( "someName", type, "path/to/eop/") 
    # possible types:  C04 | cs_erp | finals | eops | igs 
    eop_files = (
                  #("vievs_tmp"     , "C04"   , "/data1/ASCOT/apriori_files/vievs_C04_08_1962_now.txt"),
                  #("iersc04"       , "C04"   , "/data1/ASCOT/apriori_files/eopc04_IAU2000.62-now"),
                  #("c04opa"        , "C04"   , "/data1/ASCOT/apriori_files/eopc04_IAU2000.txt"),
                  #("gsfc_last_erp" , "cs_erp", "/data1/ASCOT/apriori_files/gsfc_last.erp"),
                  ("usno_finals"   , "cs_erp", "/opt/ascot/apriori_files/usno_finals.erp"),
                  ("finals2000A"   , "finals", "/opt/ascot/apriori_files/finals2000A.all")
                );

    # choose Earth Orientation Parameters here (use first entry in setup[eop_files] as identifier)
    eop = {
            erp_aprioris       = "usno_finals";
            ut1_zonal_tides    = true;
            hf_ocean           = true;
            hf_ocean_model     = "/opt/ascot/apriori_files/desai.txt";
            ut_libration       = true;
            pm_nutation        = true;
            nutation_type      = "MODFILE"; # MODFILE | IAU2000/2006 | FCN
            interpolation_type = "cspline"; # linear | polynomial | cspline | neville | nearest_neighbor
          };


    # Corrections ----------------------------------------------------------------------------------------
                
    #Troposhphere
    # TODO using external meteo data slows the import of the sessions down significantly
    troposphere = {
                    external_meteo_data = ( false, "meteo", "gpt2" );  # true|false, meteo|zhd, insitu|ecmwf|gpt2
#                   external_meteo_data = ( true, "meteo", "gpt2" );  # true|false, meteo|zhd, insitu|ecmwf|gpt2
                    gpt2_grid_file = "/opt/ascot/apriori_files/gpt2_5.grd";
                    gpt3_grid_file = "/opt/ascot/apriori_files/gpt3_1.grd";
                    mapping_function = "vmf1";          # vmf1|vmf3|gpt2|gpt3|gmf
                    interpolation_type = "cspline";     # linear | polynomial | cspline | neville | nearest_neighbor
                    bending_mode = "approx";            # nonne|insitu|height|approx
                    gradient = "apg";                   # none|apg
                    };
    galactic_abberation = {
                        apply = true;
                        galacitic_center_ra = 266.4;
                        galacitic_center_de = -29.0;
                        ssb_acceleration = 5.8;
                        ref_epoch = 57023.0;
                        };
    #Ionosphere (To-Do: TEC maps, ionosphere models, ...)
    ionosphere = {
#               apply = true,
                apply = false,
                # disables ionospheric correction for spefified baselines. use 8-letter code, e.g., ( ("WETTZELL-NYALES20"), ("WETTZELL-KOKEE") )
                exclude_bls = ( );
                };

    # Model thermal expansion according to Nothnagel 2007
    thermal_expansion = true;
#   thermal_expansion = false;

    # Model gravitational deformations of the antennas
    gravtational_deformation = true;
#   gravtational_deformation = false;

    # Model for station displacments caused by geophysical effects
    stadisp = (
                ("SOLID EARTH TIDES"      , true),
                ("OCEAN LOADING"          , true, "fes2004"),
                ("POLE TIDE"              , true, 2018 ),
                ("OCEAN POLE TIDE LOADING", true),
                ("TIDAL APLO"             , true),
                ("NON TIDAL APLO"         , false,  "cspline"), # linear | polynomial | cspline | neville | nearest_neighbor
                ("HYDROLOGY LOADING"      , false, "cspline","cmte"),  # linear | polynomial | cspline | neville | nearest_neighbor, cmte | cmse
                ("PSD"                    , false, "/opt/ascot/apriori_files/ITRF2014-psd-vlbi.dat")
               );

    # maximal station estimates to be accepted
    # if threshold is exceeded a warning is displayed and session is marked in log file
    station_threshold = { vertical  = 0.075, horizontal = 0.05 }; 

    # must be false except you are running 'solve_ambiguities' program
    solve_ambig = false;
    SB_solution = false;
    phase_solution=true;
                    
    # max observation in session to be processed
    max_obs = 35000;

    # overridden by vgosdb 
    RefClockStationList = "ONSALA60";
# ************************************************************************   
#                                     GROUPS
# ************************************************************************                                          
    # define groups of stations, sources and baselines for parametrization
    #
    # groups are accessed with the integer corresponding to the position of the group in the list (starting with 1)
    # '0' refers to all stations
    # with the '-' symbol the the group is inverted, i.e, the parametization is applied to all stations thar are not in the group
    #
    groups = {
                stations = (
                           ("ONSALA60"),
                           ("ONSA13NE"),
                           ("ONSA13SW")
                            );
                sources = (
                ["0743+259","0537-441","2037+511"],
                #[" 0745+241","1156+295","1418+546","1040+244","0355+508", "1741-038", "1124-186"]
                           @include "/opt/ascot/apriori_files/icrf3_definings.cfg"
                            );
                baselines = ( ( "WETTZELL-KOKEE" ),
                              ( "WETTZELL-WESTFORD", "GILCREEK-HOBART26" ),
                              ( "Ma-Kv" ));
    };

    # not used
    #icrf2_def_src = ( );
                      
# ************************************************************************   
#                                     PARAMETER
# ************************************************************************ 

# introduce equal clock constraints
equal_clocks = { apply = false;
                stations = ( ["WETTZELL", "WETTZ13N"] ) ;
                orders = [ 1,2 ];
                sigma = 1.0e-14;
};

PARAMS = {

    # clocks: stations, for which clocks should be estimated,
    #         handling, i.e., parameter should be reduced/fixed or not,
    #         polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #         continuous pice-wise none functions, true/false; interval length (minutes), rate constraint
    clocks = ( 
            { stations = 1;
                handling = "fix" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0 ); };
                cpwlf = { insert = false;
                            int_length = 60.0;
                            rate_cnstr = 2e-14; }; },                       
            { stations = 2;
                handling = "none" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0, 0.0, 0.0 ); };
                cpwlf = { insert = true;
#                       int_length = 20.0;
#                       rate_cnstr = 2.4e-10; };},
                        int_length = 60.0;
                        rate_cnstr = 7.2e-10; };},
            { stations = 3;
                handling = "none" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0, 0.0, 0.0 ); };
                cpwlf = { insert = true;
#                       int_length = 20.0;
#                       rate_cnstr = 2.4e-10; };}
                        int_length = 60.0;
                        rate_cnstr = 7.2e-10; };}
            );  
	
	  # 7.2e-10 ps/h
	  # int_length rate_cnstr
	  # 120        14.4e-10
          #  90        10.8e-10
          #  60         7.2e-10
          #  40         4.8e-10
          #  20         2.4e-10
              
    # baseline clocks:
    bl_clocks = ( 
                { baselines = "vgosdb";
#                 handling = "none" ;
                  handling = "fix" ;
                  polynom = { order = 0;
                  cnstr = ( 0.0 ); },
		  cpwlf = { insert = false; 
                        int_length = 20.0;
                        rate_cnstr = 5.0e-10; }; },
		{ baselines = 0;
#                 handling = "none" ;
                  handling = "fix" ;
                  polynom = { order = 0;
                  cnstr = ( 1.0e-6 ); },
		  cpwlf = { insert = false; 
                        int_length = 20.0;
                        rate_cnstr = 5.0e-10; };}   
                );
                
             
    # zenith wet delays: stations, for which clocks should be estimated,
    #                    handling, i.e., parameter should be reduced/fixed or not,
    #                    polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #                    continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
    zwd = (
            { stations = 1;
              handling = "fix" ; # reduce / fix / none
              polynom = { order = 0;
                        cnstr = ( 0.0 ); };
              cpwlf = { insert = false; 
                        int_length = 360.0;
                        rate_cnstr = 5.0e-10; }; },  # 40 ps/h = 4e-10 ds/h 
            { stations = 2;
              handling = "fix" ; # reduce / fix / none
#             handling = "none" ; # reduce / fix / none
              polynom = { order = 0;
                        cnstr = ( 0.0 ); };
              cpwlf = { insert = false; 
#             cpwlf = { insert = true; 
                        int_length = 30.0;
                        rate_cnstr = 2.0e-10; }; },  # 40 ps/h = 4e-10 ds/h 
            { stations = 3;
              handling = "fix" ; # reduce / fix / none
#             handling = "none" ; # reduce / fix / none
              polynom = { order = 0;
                        cnstr = ( 0.0 ); };
              cpwlf = { insert = false; 
#             cpwlf = { insert = true; 
                        int_length = 30.0;
                        rate_cnstr = 2.0e-10; }; }  # 40 ps/h = 4e-10 ds/h 
           );

	  # 40 ps/h = 4e-10 ds/h 
	  # int_length rate_cnstr
	  # 120        8e-10
          #  90        6e-10
          #  60        4e-10
          #  40        2.666e-10
          #  20        1.333e-10


    # estimate common zwd parameters for twin stations
#   merge_twin_zwd = true;
    merge_twin_zwd = false;
         
    # azimuthal gradients: stations, for which clocks should be estimated,
    #                      handling, i.e., parameter should be reduced/fixed or not,
    #                      polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #                      continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
    gradients = ( 
                    { stations = 0;
                      handling = "fix"; # reduce / fix / none
                      polynom = { order = 0;
                                    cnstr = ( 1.668e-10 ); };    # 0.5 mm = 1.668e-10 cs
                      cpwlf = { insert = true;
                                int_length = 480.0;
                                rate_cnstr = 2.2e-10; }; }  # 2 mm/d = 6.671e-10 cs/d = 2.2e-10 cs/(8h)
                );  
                
    # Earth Rotation param.: stations, for which clocks should be estimated,
    #                        handling, i.e., parameter should be reduced/fixed or not,
    #                        polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #                        continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
    pm =  ( { stations = 0;
            handling = "fix" ; # reduce / fix / none
            polynom = { order = 1;
                        cnstr = ( 0.0, 0.0, 0.0 ); };
            cpwlf = { insert = false;
                        int_length = 1440.0;
                        rate_cnstr = 0.0; }; } );
    ut1 =  ( { stations = 0;
            handling = "fix" ; # reduce / fix / none
#           handling = "none" ; # reduce / fix / none
            polynom = { order = 0;
                        cnstr = ( 0.0, 0.0 ); };
            cpwlf = { insert = false;
                        int_length = 1440.0;
                        rate_cnstr = 10.0; }; } );
    nut =  ( { stations = 0;
            handling = "fix" ; # reduce / fix / none
            polynom = { order = 0;
                        cnstr = ( 0.0, 0.0 ); };
            cpwlf = { insert = false;
                        int_length = 0.0;
                        rate_cnstr = 0.0; }; } );

    # stations: stations, for which clocks should be estimated,
    #           handling, i.e., parameter should be reduced/fixed or not,
    #           polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #           continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
    stations = ( 
                { stations = 1;
                handling = "fix" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0 ); };
                cpwlf = { insert = false;
                            int_length = 0.0;
                            rate_cnstr = 0.0; }; },
                { stations = 2;
                handling = "none" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0 ); };
                cpwlf = { insert = false;
                            int_length = 0.0;
                            rate_cnstr = 0.0; }; },
                { stations = 3;
                handling = "none" ; # reduce / fix / none
                polynom = { order = 0;
                            cnstr = ( 0.0 ); };
                cpwlf = { insert = false;
                            int_length = 0.0;
                            rate_cnstr = 0.0; }; } );
    
    # sources:  stations, for which clocks should be estimated,
    #           handling, i.e., parameter should be reduced/fixed or not,
    #           polynom with order (i.e., 0-offset; 1-linear,...) and constraints (#cnstr = order)
    #           continuous pice-wise linear functions, true/false; interval length (minutes), rate constraint
    sources = ( 
		{ sources = 2;
                handling = "fix"
                polynom = { order = 0;
                            cnstr = ( 1.0e-4 ); };
                cpwlf = { insert = false;
                            int_length = 0.0;
                            rate_cnstr = 0.0; }; },
		{ sources = -2;
                handling = "fix"
                polynom = { order = 0;
                            cnstr = ( 1.0e-4 ); };
                cpwlf = { insert = false;
                            int_length = 0.0;
                            rate_cnstr = 0.0; }; });
};         

# ************************************************************************   
#                           STOCHASTIC MODEL
# ************************************************************************                      

STOCHASTIC_MODEL = {
    # addional noise (according to Gipson (2007)):
    additional_noise = ( { stations = 0;
                        apply = true;
#                       apply = false;
#                       constant_sigma = 10.0;
                        constant_sigma = 5.0;
#                       elevation_dependent_sigma = 8.0;
                        elevation_dependent_sigma = 0.0;
                        correlated = false; } );
    
    # turbulence: stations: stations, for which VCM due to atmospheric turbulence should be applied,
    #             model:    atmospheric turbulence model
    #                        * sigma-c: SIGMA-C model (Schoen and Brunner, 2008)
    #                        * matern:  MATERN VCM model (Kermarrec and Schoen, 2014)
    #                        * onsala:  Treuhaft/Lanyi model and extensions (Treuhaft/Lanyi, 1987; Nilsson/Haas, 2010)
    turbulence = { apply = false;
                model = "matern_model"; # sigma_c_model | matern_model | matern_sta_model |  onsala_model | vienna_model
                turb_params = ( { stations = 0;                                   
                                    Cn = 1.0e-7; # structure index of turbulence [ m^(-1/3) ]
                                    H = 2000.0;  # Atmosphere height [m]
                                    # TODO v is not consistent for models -> need to change code in turbulence.cpp
                                    v = 8.0;         # Wind speed [m/s] 
                                    vaz = 0.0;       # direction of wind in azimuth [deg] 
                                    v_dir = 200.0; } # direction of wind  [gon] 0 zenith, 200 horizontal 
                                );
                spec_coeffs = ( 1.0, 1.0, 1.0 );
                
                };
             
};     
        

# ************************************************************************   
#                                   DATA ELIM. BLOCK
# ************************************************************************         
         
    # Eliminate the following stations from the solution
    # use IVS 8-letter code and a comma separated list, e.g., ( "WARK12M", "HOBART12" );
    elim_sta = ( "WETTVDIF", "NYALDBBC", "WIDE85_3", "VLBA85_3","NOTOX","HOBADBBC","ONSAFLEX", "ONSAVDIF","NOTDBBC","NOTOVDIF","YEBEDBBC","YEBESDBC","WETTDBBC");
    
    # minimum number of observations for a station to be not eliminated
    # if there are less than elim_min_sta observations for a station it will be eliminated 
    elim_min_sta = 3;
    elim_min_baseline = 1;
    # Eliminate the following sources from the solution
    # use IERS identifier and a comma separated list, e.g., ( "1741-038", "4C39.25" );
    #elim_src = ("LSI61303", "0236+610" ,"HR1099", "0334+004");
    elim_src = ();
    #("2009-193","0007+016","0411+245","0415+211","0422+224","0650+232");
    
    # Eliminate the following baselines from the solution 
    # use IVS 8-letter code and a comma separated list, e.g., ( "HOBART12-YARRA12M", "KOKEE-WETTZELL" );
#   elim_baseline = ("WETTZELL-WETTZ13N", "ONSA13NE-ONSA13SW", "RAEGYEB-YEBES40M");
    elim_baseline = ("WETTZELL-WETTZ13N", "RAEGYEB-YEBES40M");
    
    # eliminate all baselines except the ones provided in the list 
    # use IVS 8-letter code and a comma separated list, e.g., ( "HOBART12-YARRA12M", "KOKEE-WETTZELL" );
    # if empty nothing happens
    keep_baseline = (  );

    remove_undefined_params = true;
 
    # select method for outlier detection: 
    # BAARDA test if variance factor is known, POPE test otherwise  
    # or simple method using fixed number of iterations, a threshold 
    # for gross outliers and a quantile (inverse cdf)
    test_method = ( ( "baarda", { significance_level = 1e-9; } ), 
                    ( "pope",   { significance_level = 1e-9; } ), 
                    ( "simple", { iterations = 25;
#                                   threshold = 1.0e-9; # 1 ns
                                    threshold = 7.5e-11; # 75 ps
                                    quantile = 5.0 } ) ); 
                                    
    # additional information which editing should be used (e.g. iIVS or iGSFC) 
    # used for creating GroupDelayFull_bX.nc and Edit.nc filenames and search of the wrapper
    #vgosdb_editing = "iIVS";
    vgosdb_editing = "iOSO";

    outliers = { 
                 #detect      = false;
                 detect      = true;
                 restoration = ( true,3.0 );
                 data_snooping = "simple";
                 save = ( false, "Edit_AI2");# if true, quality_code = 0 
                                            # AND use_obs_flags = false
                                            # have to be set!
                 #load = (false, "Edit_IVG_2016a");
		 load = (true, "Edit_NGS");
                 force_load = false; # force to load EXACTLY e.g. Edit_IVG 
            };

    # only in case of vgosDB
    # eliminate observations with a quality code smaller than the one specified 
    # use quality codes between 0 (worst) and 9 (best)
    quality_code = 5;       
    use_obs_flags = true;   # if true: only observations with delay flag "0"
                            #          (and " " in case of NGS) are used from 
                            #          the DELUFLAG entries in Edit.nc or the 
                            #          flags in NGS card #2
                            # if false: all obs are used

    # manually set cabel calibration to ZERO for stations
    # second argument not used!
    #modify_cable_cal = ( ( "WETTZELL", 0.0 ) );
    modify_cable_cal = ();    

# ************************************************************************   
#                                     NNR/NNT
# ************************************************************************                             
    
    # No-Net-Rotation (NNR) and No-Net-Translation (NNT)
    no_net_cnstr = {
                    stations   = { stations = -3,
                                   apply    = false
                                   handling = "not used",
                                   sigma    = 3.3e-11, };
                    velocities = { stations = 0
                                   apply    = false,
                                   handling = "not used",
                                   sigma    = 1e-2, };
                    sources    = { sources  = 2,
                                   apply    = true,
                                   handling = "not used",
				   min_obs  = 30,
                                   sigma    = 1.0e-12, };
                    };
    
    
# ************************************************************************   
#                                     SOLVE
# ************************************************************************                                            
                      
    # method to solve normal equation system
    # LSM   least squares adjustment
    # ICLS  Inequality constrained least squares
    # LSC   least squares collocation
    solver = "LSM";


# ************************************************************************   
#                               SIMULATION
# ************************************************************************                                          
# data simulation block: uses vgosDB(_SIM) format and simulates 
# observations (which are saved as a vgosDB(_SIM) version

SIM = {

    apply = false;
    
    # white noise: stations: for which white noise should be simulated;
    #              std_dev:  corresponding standard deviation
    white_noise = ( { baselines = 0;
                    std_dev = 3.0e-11; }
                    );

    # ignores all entries in setup[SIM][white_noise] and uses standard deviation based on achieved SNR
    white_noise_from_SNR = false;
         
    # clocks: stations:      for which white noise should be simulated;
    #         allan_std_dev: corresponding standard deviation
    clocks = ( { stations = 0;
                allan_std_dev = 1.0e-14;
                interval = 50.0; } );

    # troposphere: model: turbulence model to simulate ZWDs
    #              turb_params: turbulence parameters including
    #                stations: for which white noise should be simulated;
    #                Cn:       structure constant [m**-2/3] (scaling for turbulence)
    #                H:        effective tropospheric height (integration height)
    #                v:        wind velocity [m/s**2]
    #                v_dir:    wind direction [gon]; 200.0 == horizontal; 0.0 == zenith
    #              spec_coeffs: coeffs for anisotropy
    #              L: saturation length scale 
    #              L0: outer scale length
    troposphere = { model = "matern_model"; # sigma_c_model / matern_model / onsala_model
                    # values from "Design aspects of the vlbi2010 system"
                    turb_params = ( 
                                    { stations = 0;                             
                                    Cn = 1.0e-7;
                                    H = 2000.0;
                                    v = 28800.0; #m/h
                                    vaz = 0.0;
                                    v_dir = 200.0; }
                                    );
                    spec_coeffs = ( 1.0, 1.0, 1.0 );
                    L = 3.0e6;
                    L0 = 6000.0;                      
                };

    save = ( false, "GroupDelayFull_bX_SIM" );  
    load = ( false, "GroupDelayFull_bX_SIM" );

    
    # simulate Reference troposphere
    Reference = {
        apply = false;

        # step
        # 0 : only calculate and save VCM
        # 1 : compute refernce clocks and troposhere for all databases based on VCM
        # 2 : use saved reference tropohere and clock for simulation
        step = 2;

        path = "/mnt/raidz0/ASCOT_out/PH/simulation/";

        troposphere = {
            numCells = (1, 6, 12, 18, 24, 29, 35, 40, 44);
            dt = 60.0; #seconds
            duration = 3720.0;
            initalEZWD = 450.0e-11; #seconds
        };
            
    };

};

# ************************************************************************   
#                           NEARFIELD
# ************************************************************************                      

NEARFIELD = {

    #Ephemerides which can be used
    ephemerides = (("tle_moon","tle","xxxxxxxxxx"),
                ("sp3_sat_15AUG24","sp3","/opt/ascot/apriori_files/sat_catalogs/15AUG24X.sp3"),
                ("tle_sat_15AUG24","tle","/opt/ascot/apriori_files/sat_catalogs/15AUG24X.tle"));

    #Individual selection corresponding to ephemerides
    moon_ephem = "tle_moon";
    sat_ephem = "sp3_sat_15AUG24";

    #near-field-delay-model to be used
    # "duev_2012", "sekido_2006", "sekido_simple_2006"
    moon_model = "duev_2012";
    sat_model = "sekido_2006";
};        

# ************************************************************************   
#                           SCHEDULE
# ************************************************************************  

SKED = {


    # general switch if scheduling is running or not
    apply = false;

    # selected approach for optimal scan determination
    # sequential:
    #   0 = impact
    #   1 = coverage
    #   2 = minsigma
    #   3 = random
    # global optimization
    #   4 = legacy
    #   5 = vgos (regular observations)
    approach = 1;

    # only in case of a sequential approach
    # define approach for intial scans ( it is possible to use another sequential approch for the first n scans)
    initial_scans = 3;   
    initial_approach = 2;

    # ATTENTION - In case of INT-scheduling
    # if true: start/end-time, skd-file-name and stations are used from masterfiles
    # Affected variables within this configblock will be overwritten!
    use_intensive_masterfile_infos = { name = false,
                                       stations = false,
                                       time = false}
    
    # The following setting are read from skd file if applied
    # corresponding settings in this file are ignored
    # may affect simulation if skd files are loaded
    init_from_sked = { apply = false,
                       sources = false,
                       flux = false,
                       min_scan = false,
                       max_scan = false,
                       snr_min_x = false,
                       snr_min_s = false,
                       snr_margin_x = false;
                       snr_margin_s = false;
                       min_sun_dist = false,
                       min_time_src = false,
                       min_elevation = false };

    # use /year/session/ folder structure
    # otherwise all files will be saved in one directory
    # also affects the loading of files
    use_year_ses_structure = true;

    # description and propteries of the experiment
    description = "co-location ONSALA short baseline experiment";
    name_prefix = "on"; # leads to e.g. k16013.skd
    scheduler = "OSO";
    correlator = "OSO";
    start_time = "19:00:00";       # "07:30:00";
    end_time = "18:59:00";           # "08:30:00";
    

    # minimal distance to sun as angular distance in degree
    min_sun_dist = 15.0;

    # global elevation mask (default 5.0 degree)
    min_elevation = 5.0;

    # minimal/maximal scan duration
    min_scan = 60.0;
    max_scan = 180.0;       # test: 90.0, 120.0

    # maximal and minimal slew for each telescope (degree) only for sequential approches
    # Only in azimuth!
    max_slew = 175.0; 
    min_slew = 15.0; 

    # minimum SNR for X-band and S-band
    snr_min_x = 50.0;
    snr_min_s =  5.0;
    
    # works only in global approach
    snr_margin_x = 0.0;
    snr_margin_s = 0.0;

    # minimum time between same source to be observed (default 10min = 600sec)
    min_time_src = 1200.0; #[sec]

    # add picoseconds for calculation of sigma (_std_sked)
    add_ps = 30.0; # [ps]

    # const times [sec] (defaults)
    const_sync = 3.0; # sync time offset for simulator._calc_obs_duration(...)
    const_source = 5.0; # duration to bring into coincidence on source
    const_calib = 10.0; # duration for calibration (in the SNAP preob procedure) after slewing and before obs-starttime
    const_setup = 30.0; # Used to set up modules before every scan. (Has to be samller than min_scan for grb)
    const_idle = 0.0; # Post-scan calibration

    # source catalog used for scheduling (sked catalog)
    sources = "/usr/local/sked/sked_cat/source.cat.geodetic.good";

    # stations used for the schedule (IVS 8-letter code)
    stations = ("ONSALA60","ONSA13SW","ONSA13NE"); 

    # information from modes.cat
    # recording mode name, as found in rec.cat. This label is generally formed as: tracks-channels-fanout-bits.
    # frequency sequence name, as found in freq.cat.
    rec_name = "32-16-1-2"; # "00-16-0-1"; # e.g. 00-16-0-1 or  32-16-1-2
    freq_name = "GEOSX";    # e.g.    GEOSX     or  GEOSX8N
    bandwidth = 8.0; # Bandwidth per subband in MHz

    # if applied  freq_name   an bandwidth are overwritten
    broadband = { apply = true,
                  channels = 32,
                  bandwidth = 32.0};
    
    # only needed by global approach ---------------------------------------------------------------------------------------
    
    # length of inervals in which valid tranits are computed in sec
    transit_interval_length = 15;
    
    # if false alignment duration is  const_source + const_calib + const_setup + const_idle
    model_alignment = false;
    
    # only if model_alignment ==  false. If assume_worst_slew is true the slew time is set to a full rotation of a telescope
    assume_worst_slew = true;

    # Tree ------------
    max_tree_level = 4;
    temporal_resolution = 20; #min 10
    temporal_shift = 5; #min 5
    
    EqualAreaGrid = (
                (3,7),
                (1,7,10),
                (1, 5,10,13),
                (1, 6, 12, 17, 21, 24, 26)
                );
    
  
    # Maximal number of simulateous observed subnets
    MaxSubNets = 0;

    # Minimal/Maximal observatins of the same source within the entire session
    #MinNumSource = 1;
    #MaxNumSource = 3;

    # minimal ratio of observed sources within entire session
    #RatioUsedSources = 0.5;

    allow_twin_same_source = false;


   #  minNumObs = 1;
   # maxNumObs = 110;
    
    objective_surface = false;
    objective_relative = false;
    objective_nobs_weight = 0.0; 
     
    gurobi_param = ( 
                      ( "TimeLimit"    , "500" ),
                      ( "MIPGap"       , "0.0005" ),
                      ( "Presolve"     , "2" )
                    # ( "Method"       , "-1" ),
                    # ( "Threads"      , "12" ),
                    # ( "TuneTimeLimit", "300")
                    );

    #grbtune = true;

    #tune_file = "/home/corbin/experiments/test/2018/q18060/q18060_tune.prm";

    grb_export_model = false;
    grb_export_solution = false;
    #import_start_solution = "/home/corbin/experiments/test/2hses.sol";
                    
                       
    createPlots = false;
     # only relevant if createPlots = true
    auto_close_windows = false;

    max_time_without_observation = 300.0; #[sec]

    twin_arc_dist = 60.0;

}; 


} # setup
